# -*- coding: utf-8 -*-
"""Numpy Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fx9u5BZupERF-JsrlkeqDRbZ9suTOIn_

### **NUMPY BASICS** ğŸ™‚
"""

import numpy as np

my_list = [1,3,5,6,7,8]

"""### **Converting a List into an Array**

---










"""

arr= np.array(my_list)
arr

arr2 =np.array([[1,2,3,4], [9,8,7,6]])

"""### **Array Properties**

---


"""

arr2.shape

arr2.ndim

arr2.size

arr2.dtype

"""### **Array Operations**

---


"""

arr2

"""### **Accessing Rows**

---


"""

arr2[0]

#First Element
arr2[0,0]

arr2[1,2]

arr2[1,1:]

arr2[1,0:1]

"""###**Accessing Columns**



---


"""

arr2

###Getting the last Column
arr2[:,3]

###Getting the first Column
arr2[:, 0]

"""### **Initializing Arrays**

---


"""

### Single Vector
a= np.zeros(2)
a

b= np.zeros((2,2))
b

c=np.zeros((3,4))
c

### 3D Arrays
d = np.zeros((3,5,4))
d

e = np.ones((2,3))
e

"""### **Reshaping Arrays**

---


"""

l = np.array([[1,2,3,4], [8,9,10,11]])
l

l.reshape((2,2,2))

k = l.reshape(1,8)
k

l

"""### **Mathematics**

---


"""

array1 = np.array([1,2,3,4])
array1

array1*2

array1+3

array1 /255

np.cos(a)

np.sin(a)

"""### **Linear Algebra**

---


"""

s = np.ones((2,3))
 print(s)

d = np.full((3,2), 2)
print(d)

np.matmul(s,d)

### Creating an Identity matrix of size 4*4 and Finding the Determinent
f = np.identity(4)
np.linalg.det(f)

"""### **Statistics**

---


"""

g = np.array([[1,2,3,4], [5,6,7,8]])
g

np.min(g)

np.max(g)

np.median(g)

np.sum(g)

###Combining Arrays or Stacking Arrays

V1 = [1,3,5,7,9]
V2= [2,4,6,8,10]

np.vstack((V1,V2))

### Horizontal Stacking

e1 = np.ones((2,4))
e2= np.zeros((2,2))

np.hstack((e1,e2))

"""### **Loading data from a file**

---


"""

path = "/content/drive/MyDrive/New Text Document.txt"

filedata = np.genfromtxt(path, delimiter = ",")
filedata

## Data is in float, we can change that to int as well
filedata = filedata.astype('int32')

filedata

### Print particular values with help of index
filedata[filedata> 100]

### Reversing an array using Numpy

cv = np.array([90,89,87,86,85,84])

np.flip(cv)

"""### **Flattening an Array**

---


"""

xc = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

flattened = xc.flatten()
flattened

### When you use flatten, changes to your new array wonâ€™t change the parent array.

